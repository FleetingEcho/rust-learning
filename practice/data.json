[
  {
    "by": "calcsam",
    "descendants": 112,
    "id": 43103073,
    "kids": [
      43108437,
      43111312,
      43105774,
      43105871,
      43107250,
      43106216,
      43105172,
      43105129,
      43105932,
      43106825,
      43103503,
      43107560,
      43107464,
      43108488,
      43108999,
      43105621,
      43109591,
      43106373,
      43105151,
      43106494,
      43109820,
      43105453,
      43105134,
      43109991,
      43106002,
      43106220,
      43105036,
      43106904,
      43107901,
      43105019,
      43104920
    ],
    "score": 335,
    "text": "Hi HN, we’re Sam, Shane, and Abhi, and we’re building Mastra (<a href=\"https:&#x2F;&#x2F;mastra.ai\">https:&#x2F;&#x2F;mastra.ai</a>), an open-source JavaScript SDK for building agents on top of Vercel’s AI SDK.<p>You can start a Mastra project with `npm create mastra` and create workflow graphs that can suspend&#x2F;resume, build a RAG pipeline and write evals, give agents memory, create multi-agent workflows, and view it all in a local playground.<p>Previously, we built Gatsby, the open-source React web framework. Later, we worked on an AI-powered CRM but it felt like we were having to roll all the AI bits (agentic workflows, evals, RAG) ourselves. We also noticed our friends building AI applications suffering from long iteration cycles: they were getting stuck debugging prompts, figuring out why their agents called (or didn’t call) tools, and writing lots of custom memory retrieval logic.<p>At some point we just looked at each other and were like, why aren&#x27;t we trying to make this part easier, and decided to work on Mastra.<p>Demo video: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8o_Ejbcw5s8\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8o_Ejbcw5s8</a><p>One thing we heard from folks is that seeing input&#x2F;output of every step, of every run of every workflow, is very useful. So we took XState and built a workflow graph primitive on top with OTel tracing. We wrote the APIs to make control flow explicit:  `.step()` for branching, `.then()` for chaining, and `.after()` for merging. We also added .`.suspend()&#x2F;.resume()` for human-in-the-loop.<p>We abstracted the main RAG verbs like `.chunk()`, `embed()`, `.upsert(),’ `.query()`, and `rerank()` across document types and vector DBs. We shipped an eval runner with evals like completeness and relevance, plus the ability to write your own.<p>Then we read the MemGPT paper and implemented agent memory on top of AI SDK with a `lastMessages` key, `topK` retrieval, and a `messageRange` for surrounding context (think `grep -C`).<p>But we still weren’t sure whether our agents were behaving as expected, so we built a local dev playground that lets you curl agents&#x2F;workflows, chat with agents, view evals and traces across runs, and iterate on prompts with an assistant. The playground uses a local storage layer powered by libsql (thanks Turso team!) and runs on localhost with `npm run dev` (no Docker).<p>Mastra agents originally ran inside a Next.js app. But we noticed that AI teams’ development was increasingly decoupled from the rest of their organization, so we built Mastra so that you can also run it as a standalone endpoint or service.<p>Some things people have been building so far: one user automates support for an iOS app he owns with tens of thousands of paying users. Another bundled Mastra inside an Electron app that ingests aerospace PDFs and outputs CAD diagrams. Another is building WhatsApp bots that let you chat with objects like your house.<p>We did (for now) adopt an Elastic v2 license. The agent space is pretty new, and we wanted to let users do whatever they want with Mastra but prevent, eg, AWS from grabbing it.<p>If you want to get started:\n- On npm: npm create mastra@latest \n- Github repo: <a href=\"https:&#x2F;&#x2F;github.com&#x2F;mastra-ai&#x2F;mastra\">https:&#x2F;&#x2F;github.com&#x2F;mastra-ai&#x2F;mastra</a>\n- Demo video: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8o_Ejbcw5s8\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8o_Ejbcw5s8</a>\n- Our website homepage: <a href=\"https:&#x2F;&#x2F;mastra.ai\">https:&#x2F;&#x2F;mastra.ai</a> (includes some nice diagrams and code samples on agents, RAG, and links to examples) \n- And our docs: <a href=\"https:&#x2F;&#x2F;mastra.ai&#x2F;docs\">https:&#x2F;&#x2F;mastra.ai&#x2F;docs</a><p>Excited to share Mastra with everyone here – let us know what you think!",
    "time": 1739978708,
    "title": "Show HN: Mastra – Open-source JS agent framework, by the developers of Gatsby",
    "type": "story",
    "url": "https://github.com/mastra-ai/mastra"
  },
  {
    "by": "Jimmc414",
    "descendants": 152,
    "id": 43102528,
    "kids": [
      43104337,
      43111328,
      43104640,
      43102748,
      43104783,
      43104446,
      43110130,
      43106600,
      43104980,
      43105490,
      43106176,
      43102531,
      43104234,
      43104663,
      43108201,
      43110937,
      43109951,
      43104871,
      43111059,
      43104449,
      43104441
    ],
    "score": 303,
    "time": 1739975574,
    "title": "Accelerating scientific breakthroughs with an AI co-scientist",
    "type": "story",
    "url": "https://research.google/blog/accelerating-scientific-breakthroughs-with-an-ai-co-scientist/"
  },
  {
    "by": "todsacerdoti",
    "descendants": 10,
    "id": 43108614,
    "kids": [
      43111337,
      43110213,
      43109740
    ],
    "score": 121,
    "time": 1740004338,
    "title": "Build your own SQLite in Rust, Part 5: Evaluating queries",
    "type": "story",
    "url": "https://blog.sylver.dev/build-your-own-sqlite-part-5-evaluating-queries"
  },
  {
    "by": "sohkamyung",
    "descendants": 228,
    "id": 43101383,
    "kids": [
      43110391,
      43102277,
      43110095,
      43111305,
      43108093,
      43102664,
      43102422,
      43102442,
      43108991,
      43102894,
      43102445,
      43109929,
      43108065,
      43110696,
      43109404,
      43103531,
      43110619,
      43102466,
      43103413,
      43103651,
      43109115,
      43103909,
      43109069,
      43108558,
      43108698,
      43108339,
      43103631,
      43103927,
      43103385,
      43103445,
      43109120,
      43102820,
      43102288,
      43101577,
      43102914,
      43102703,
      43108114,
      43109894,
      43102450,
      43108517,
      43107446,
      43106277,
      43102359,
      43103051
    ],
    "score": 405,
    "time": 1739968566,
    "title": "Broken legs and ankles heal better if you walk on them within weeks",
    "type": "story",
    "url": "https://www.scientificamerican.com/article/broken-legs-and-ankles-heal-better-if-you-walk-on-them-within-weeks/"
  },
  {
    "by": "adtac",
    "descendants": 43,
    "id": 43096477,
    "kids": [
      43107465,
      43106111,
      43104857,
      43109280,
      43109094,
      43105583,
      43107705,
      43105798,
      43104820,
      43105604,
      43105510,
      43109214,
      43104925,
      43106766,
      43105523
    ],
    "score": 241,
    "text": "Hey HN, we built Subtrace (<a href=\"https:&#x2F;&#x2F;subtrace.dev\">https:&#x2F;&#x2F;subtrace.dev</a>) to let you see all incoming and outgoing requests in your backend server—like Wireshark, but for Docker containers. It comes with a Chrome DevTools-like interface. \nCheck out this video: <a href=\"https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=OsGa6ZwVxdA\" rel=\"nofollow\">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=OsGa6ZwVxdA</a>, and see our docs for examples: \n<a href=\"https:&#x2F;&#x2F;docs.subtrace.dev\">https:&#x2F;&#x2F;docs.subtrace.dev</a>.<p>Subtrace lets you see every request with full payload, headers, status code, and latency details. Tools like Sentry and OpenTelemetry often leave out these crucial details, making prod debugging slow and annoying. Most of the time, all I want to see are the headers and JSON payload of real backend requests, but it&#x27;s impossible to do that in today&#x27;s tools without excessive logging, which just makes everything slower and more annoying.<p>Subtrace shows you every backend request flowing through your system. You can use simple filters to search for the requests you care about and inspect their details.<p>Internally, Subtrace intercepts all network-related Linux syscalls using Seccomp BPF so that it can act as a proxy for all incoming and outgoing TCP connections. It then parses HTTP requests out of the proxied TCP stream and sends them to the browser over WebSocket. The Chrome DevTools Network tab is already ubiquitous for viewing HTTP requests in the frontend, so we repurposed it to work in the browser like any other app (we were surprised that it&#x27;s just a bunch of TypeScript).<p>Setup is just one command for any Linux program written in any language.<p>You can use Subtrace by adding a `subtrace run` prefix to your backend server startup command. No signup required. Try for yourself: <a href=\"https:&#x2F;&#x2F;docs.subtrace.dev\">https:&#x2F;&#x2F;docs.subtrace.dev</a>",
    "time": 1739921357,
    "title": "Show HN: Subtrace – Wireshark for Docker Containers",
    "type": "story",
    "url": "https://github.com/subtrace/subtrace"
  },
  {
    "by": "phsilva",
    "descendants": 16,
    "id": 43076088,
    "kids": [
      43111181,
      43111020,
      43110710,
      43111138
    ],
    "score": 36,
    "time": 1739776358,
    "title": "A Tail Calling Interpreter for Python (already landed in CPython)",
    "type": "story",
    "url": "https://blog.reverberate.org/2025/02/10/tail-call-updates.html"
  },
  {
    "by": "cyndunlop",
    "descendants": 195,
    "id": 43105028,
    "kids": [
      43106098,
      43108545,
      43109707,
      43106843,
      43109670,
      43107134,
      43106221,
      43105732,
      43108474,
      43107494,
      43111261,
      43109601,
      43108322,
      43106669,
      43107489,
      43108316,
      43105455,
      43109477,
      43110588,
      43105780,
      43109329,
      43105223,
      43110882,
      43106657,
      43108799,
      43108435,
      43106688,
      43105534,
      43108044,
      43105332,
      43109511
    ],
    "score": 516,
    "time": 1739987288,
    "title": "When imperfect systems are good: Bluesky's lossy timelines",
    "type": "story",
    "url": "https://jazco.dev/2025/02/19/imperfection/"
  },
  {
    "by": "rbanffy",
    "descendants": 41,
    "id": 43070558,
    "kids": [
      43109589,
      43109525,
      43109081,
      43110328,
      43111116,
      43110650,
      43110639,
      43110387,
      43110640,
      43109675,
      43110818,
      43110646,
      43109447,
      43110067,
      43110250,
      43110383,
      43110350,
      43110210
    ],
    "score": 79,
    "time": 1739732194,
    "title": "The 8-Bit Era's Weird Uncle: The TI-99/4A",
    "type": "story",
    "url": "https://bumbershootsoft.wordpress.com/2025/02/15/the-8-bit-eras-weird-uncle-the-ti-99-4a/"
  },
  {
    "by": "henry_flower",
    "descendants": 38,
    "id": 43108091,
    "kids": [
      43108644,
      43109285,
      43108825,
      43109337,
      43110223,
      43109114,
      43108974,
      43110021
    ],
    "score": 241,
    "time": 1740001267,
    "title": "1972 Unix V2 \"Beta\" Resurrected",
    "type": "story",
    "url": "https://www.tuhs.org/pipermail/tuhs/2025-February/031420.html"
  },
  {
    "by": "SerCe",
    "descendants": 0,
    "id": 43110265,
    "score": 30,
    "time": 1740017485,
    "title": "Magma: A Foundation Model for Multimodal AI Agents",
    "type": "story",
    "url": "https://microsoft.github.io/Magma/"
  }
]